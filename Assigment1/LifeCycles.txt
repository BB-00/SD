// Chef Life Cycle

Kitchen.watchNews()
Kitchen.startPreparation()
do {
	if (!firstCourse) Kitchen.continuePreparation();
	else firstCourse = False;
	Kitchen.proceedToPreparation();
	Bar.alertTheWaiter();
	while(!Kitchen.haveAllPortionsBeenDelivered()){
		Kitchen.haveNextPortionReady();
		Bar.alertTheWaiter();
	}
} while(!Kitchen.hasTheOrderBeenCompleted());
kitchen.cleanUp();


// Waiter Life Cycle

do{
	aux = Bar.lookAround();
	switch(aux)
		case enter:
			Table.saluteTheClient();
			Table.returnToBar();
		case callTheWaiter():
			Table.getThePad();
			Kitchen.handNoteToChef();
			Kitchen.returnToBar();
		case alertTheWaiter:
			do{
				Kitchen.collectPortion();
				Table.deliverPortion();
			while(Table.haveAllClientsBeenServed());
			Table.returnToBar();
		case shouldHaveArrivedEarlier:
			Bar.prepareTheBill();
			Table.presentTheBill();
			Table.returnToBar();
while();


// Student Life Cycle

walkABit();
enter();
Table.readTheMenu();
if(Table.isFirstToArrive()){
	Table.prepareTheOrder();
	do{
		Table.addUpOnesChoices();
	}while(!Table.hasEverybodyChoices());
	Table.callTheWaiter();
	Table.describeTheOrder();
	Table.jointTheTalk();
}else{
	Table.informCompanion();
}
do{
	Table.startEating();
	Table.endEating();
	if(Table.isLastToFinishEating()) Table.signalTheWaiter();
}while(!Table.haveAllCoursesBeenServed());
if(Table.isLastToArrive()){
	Table.shouldHaveArrivedEarlier();
	Table.honourTheBill();
}
Table.exit();